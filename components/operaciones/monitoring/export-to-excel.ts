import ExcelJS from "exceljs";
import { saveAs } from "file-saver";
import { MonitoringInfo } from "./shipment-tracking";

export async function exportToExcel(packages: MonitoringInfo[]) {
  if (packages.length === 0) {
    alert("No hay datos para exportar")
    return
  }

  const workbook = new ExcelJS.Workbook();
  const sheet = workbook.addWorksheet("Seguimiento de Paquetes");
  const currentDate = new Date();

  // === ENCABEZADO GENERAL ===
  const titleRow = sheet.addRow(["游닍 Seguimiento de Paquetes"]);
  sheet.mergeCells(`A${titleRow.number}:R${titleRow.number}`);
  titleRow.font = { size: 16, bold: true, color: { argb: "FFFFFF" } };
  titleRow.alignment = { vertical: "middle", horizontal: "center" };

  for (let col = 1; col <= 18; col++) {
    sheet.getCell(titleRow.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "EF883A" },
    };
  }

  sheet.addRow([]);
  sheet.addRow([`Fecha de generaci칩n: ${currentDate.toLocaleDateString('es-ES')}`]);
  sheet.addRow([`Hora de generaci칩n: ${currentDate.toLocaleTimeString('es-ES')}`]);
  sheet.addRow([`Total de paquetes: ${packages.length}`]);
  sheet.addRow([]);

  // === ENCABEZADO DE COLUMNAS ===
  const headerRow = sheet.addRow([
    "No.",
    "N칰mero de Tracking",
    "Destino",
    "Ubicaci칩n Actual",
    "Fecha Compromiso",
    "Estado del Env칤o",
    "Tipo de Env칤o",
    "Consolidado",
    "Fecha de Consolidado",
    "Desembarque",
    "Fecha de Desembarque",
    "Chofer Asignado",
    "Veh칤culo",
    "Placa del Veh칤culo",
    "Estado de la Ruta",
    "Fecha de Creaci칩n de Ruta",
    "Sucursal",
    "D칤as en Bodega"
  ]);

  headerRow.font = { bold: true, color: { argb: "FFFFFF" } };
  headerRow.alignment = { vertical: "middle", horizontal: "center" };

  for (let col = 1; col <= 18; col++) {
    sheet.getCell(headerRow.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "8C5E4E" },
    };
    sheet.getCell(headerRow.number, col).border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" },
    };
  }

  // === DATOS ===
  packages.forEach((pkg, index) => {
    const diasEnBodega = calculateDaysInWarehouse(pkg);
    const noTieneSalidaARuta = !pkg.packageDispatch;
    const debeResaltarFilaRoja = noTieneSalidaARuta && diasEnBodega > 3;
    
    // Solo verificar compromiso hoy para paquetes NO entregados
    const tieneCommitHoy = hasCommitDateToday(pkg);
    const noEstaEnRuta = pkg.shipmentData.shipmentStatus?.toLowerCase() !== "en_ruta";
    const noEstaEntregado = pkg.shipmentData.shipmentStatus?.toLowerCase() !== "entregado";
    const debeResaltarFilaNaranja = tieneCommitHoy && noEstaEnRuta && noEstaEntregado;

    // CORRECCI칍N: Ubicaci칩n actual para paquetes entregados
    const ubicacionActual = getUbicacionActual(pkg);
    
    // CORRECCI칍N: Estado del env칤o con l칩gica especial
    const estadoDelEnvio = getEstadoDelEnvio(pkg);

    const row = sheet.addRow([
      index + 1,
      pkg.shipmentData.trackingNumber || "N/A",
      pkg.shipmentData.destination || "N/A",
      ubicacionActual, // CORREGIDO
      pkg.shipmentData.commitDateTime ? formatExcelDate(pkg.shipmentData.commitDateTime) : "N/A",
      estadoDelEnvio, // CORREGIDO
      pkg.shipmentData.isCharge ? "Cargo" : "Paquete",
      pkg.shipmentData.consolidated?.consNumber || "N/A",
      pkg.shipmentData.consolidated?.date ? formatExcelDate(pkg.shipmentData.consolidated.date) : "N/A",
      pkg.shipmentData.unloading?.trackingNumber || "N/A",
      pkg.shipmentData.unloading?.date ? formatExcelDate(pkg.shipmentData.unloading.date) : "N/A",
      pkg.packageDispatch?.driver || "No asignado",
      pkg.packageDispatch?.vehicle?.name || "N/A",
      pkg.packageDispatch?.vehicle?.plateNumber || "N/A",
      pkg.packageDispatch?.status ? formatRouteStatus(pkg.packageDispatch.status) : "N/A",
      pkg.packageDispatch?.createdAt ? formatExcelDate(pkg.packageDispatch.createdAt) : "N/A",
      pkg.packageDispatch?.subsidiary?.name || "N/A",
      diasEnBodega > 0 ? diasEnBodega.toString() : "N/A"
    ]);

    // Filas alternadas en gris (solo si no debe resaltarse)
    if (index % 2 === 0 && !debeResaltarFilaRoja && !debeResaltarFilaNaranja) {
      for (let col = 1; col <= 18; col++) {
        sheet.getCell(row.number, col).fill = {
          type: "pattern",
          pattern: "solid",
          fgColor: { argb: "F2F2F2" },
        };
      }
    }

    // Bordes y alineaci칩n
    row.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      };
      
      // Centrar columnas espec칤ficas
      if ([1, 6, 7, 9, 11, 15, 16, 18].includes(colNumber)) {
        cell.alignment = { vertical: "middle", horizontal: "center", wrapText: true };
      } else {
        cell.alignment = { vertical: "middle", horizontal: "left", wrapText: true };
      }

      // PRIORIDAD 1: Fila naranja (m치xima prioridad - compromiso hoy sin ruta)
      if (debeResaltarFilaNaranja) {
        cell.fill = {
          type: "pattern",
          pattern: "solid",
          fgColor: { argb: "FF9900" }
        };
        cell.font = { 
          color: { argb: "FFFFFF" },
          bold: true 
        };
      }
      // PRIORIDAD 2: Fila roja (sin salida a ruta + >3 d칤as)
      else if (debeResaltarFilaRoja) {
        cell.fill = {
          type: "pattern",
          pattern: "solid",
          fgColor: { argb: "FF0000" }
        };
        cell.font = { 
          color: { argb: "FFFFFF" },
          bold: true 
        };
      }
      else {
        // Colores condicionales para estado del env칤o (solo si no est치 resaltada)
        if (colNumber === 6) {
          const status = cell.value?.toString().toLowerCase();
          if (status === "en ruta") {
            cell.fill = {
              type: "pattern",
              pattern: "solid",
              fgColor: { argb: "FFF2CC" }
            };
            cell.font = { color: { argb: "7F6000" }, bold: true };
          } else if (status === "entregado") {
            cell.fill = {
              type: "pattern",
              pattern: "solid",
              fgColor: { argb: "E2F0D9" }
            };
            cell.font = { color: { argb: "385723" }, bold: true };
          } else if (status === "en bodega") {
            cell.fill = {
              type: "pattern",
              pattern: "solid",
              fgColor: { argb: "DEEBF7" }
            };
            cell.font = { color: { argb: "2F5597" }, bold: true };
          } else if (status === "devuelto a fedex" || status === "devuelto") {
            cell.fill = {
              type: "pattern",
              pattern: "solid",
              fgColor: { argb: "F2F2F2" }
            };
            cell.font = { color: { argb: "666666" }, bold: true };
          }
        }

        // Color para tipo de env칤o (Cargo)
        if (colNumber === 7 && cell.value === "Cargo") {
          cell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FCE4D6" }
          };
          cell.font = { color: { argb: "943634" }, bold: true };
        }

        // Color para d칤as en bodega > 3 (solo si no est치 resaltada)
        if (colNumber === 18 && diasEnBodega > 3) {
          cell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FFC7CE" }
          };
          cell.font = { 
            color: { argb: "9C0006" },
            bold: true 
          };
        }

        // Color para fecha compromiso hoy (solo si no est치 resaltada)
        if (colNumber === 5 && tieneCommitHoy) {
          cell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FF9900" }
          };
          cell.font = { 
            color: { argb: "FFFFFF" },
            bold: true 
          };
        }
      }
    });
  });

  // === HOJA DE RESUMEN ===
  const summarySheet = workbook.addWorksheet("Resumen");

  // T칤tulo del resumen
  const summaryTitle = summarySheet.addRow(["游늵 Resumen de Seguimiento"]);
  summarySheet.mergeCells(`A${summaryTitle.number}:B${summaryTitle.number}`);
  summaryTitle.font = { size: 14, bold: true, color: { argb: "FFFFFF" } };
  summaryTitle.alignment = { vertical: "middle", horizontal: "center" };

  for (let col = 1; col <= 2; col++) {
    summarySheet.getCell(summaryTitle.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "EF883A" },
    };
  }

  summarySheet.addRow([]);

  // Estad칤sticas generales
  const statsTitle = summarySheet.addRow(["ESTAD칈STICAS GENERALES"]);
  summarySheet.mergeCells(`A${statsTitle.number}:B${statsTitle.number}`);
  statsTitle.font = { bold: true, color: { argb: "FFFFFF" } };
  statsTitle.alignment = { vertical: "middle", horizontal: "left" };

  for (let col = 1; col <= 2; col++) {
    summarySheet.getCell(statsTitle.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "8C5E4E" },
    };
  }

  const enBodega = packages.filter(p => getEstadoDelEnvio(p) === "En Bodega").length;
  const enRuta = packages.filter(p => getEstadoDelEnvio(p) === "En Ruta").length;
  const entregados = packages.filter(p => getEstadoDelEnvio(p) === "Entregado").length;
  const devueltos = packages.filter(p => 
    getEstadoDelEnvio(p) === "Devuelto a FedEx" || 
    getEstadoDelEnvio(p) === "Devuelto"
  ).length;
  const cargos = packages.filter(p => p.shipmentData.isCharge).length;
  const paquetes = packages.filter(p => !p.shipmentData.isCharge).length;
  
  // Solo contar paquetes con compromiso hoy que NO est칠n entregados
  const paquetesConCommitHoy = packages.filter(pkg => hasCommitDateToday(pkg));
  const paquetesConCommitHoySinRuta = paquetesConCommitHoy.filter(pkg => {
    const estado = getEstadoDelEnvio(pkg);
    return estado !== "En Ruta" && estado !== "Entregado";
  }).length;
  
  // Estad칤sticas de paquetes sin salida a ruta
  const paquetesSinSalidaARuta = packages.filter(p => !p.packageDispatch);
  const paquetesCriticos = paquetesSinSalidaARuta.filter(pkg => 
    calculateDaysInWarehouse(pkg) > 3
  ).length;
  
  // Estad칤sticas de d칤as en bodega (excluyendo entregados y devueltos)
  const paquetesEnBodega = packages.filter(p => {
    const estado = getEstadoDelEnvio(p);
    return estado === "En Bodega" || estado === "En Ruta";
  });
  
  const paquetesConMasDe3Dias = paquetesEnBodega.filter(pkg => 
    calculateDaysInWarehouse(pkg) > 3
  ).length;
  
  const paquetesConMasDe7Dias = paquetesEnBodega.filter(pkg => 
    calculateDaysInWarehouse(pkg) > 7
  ).length;

  // Promedio de d칤as en bodega
  const totalDiasEnBodega = paquetesEnBodega.reduce((sum, pkg) => 
    sum + calculateDaysInWarehouse(pkg), 0
  );
  const promedioDiasEnBodega = paquetesEnBodega.length > 0 
    ? (totalDiasEnBodega / paquetesEnBodega.length).toFixed(1)
    : "0";

  summarySheet.addRow(["Total de paquetes:", packages.length]);
  summarySheet.addRow(["Paquetes en bodega:", enBodega]);
  summarySheet.addRow(["Paquetes en ruta:", enRuta]);
  summarySheet.addRow(["Paquetes entregados:", entregados]);
  summarySheet.addRow(["Paquetes devueltos:", devueltos]);
  summarySheet.addRow(["Cargos:", cargos]);
  summarySheet.addRow(["Paquetes regulares:", paquetes]);
  summarySheet.addRow(["Paquetes sin salida a ruta:", paquetesSinSalidaARuta.length]);
  summarySheet.addRow(["Paquetes cr칤ticos (>3 d칤as sin ruta):", paquetesCriticos]);
  summarySheet.addRow(["Paquetes con compromiso hoy:", paquetesConCommitHoy.length]);
  summarySheet.addRow(["Paquetes con compromiso hoy SIN RUTA:", paquetesConCommitHoySinRuta]);
  summarySheet.addRow([]);

  // SECCI칍N: ALERTAS URGENTES
  const alertasTitle = summarySheet.addRow(["游뚿 ALERTAS URGENTES"]);
  summarySheet.mergeCells(`A${alertasTitle.number}:B${alertasTitle.number}`);
  alertasTitle.font = { bold: true, color: { argb: "FFFFFF" } };
  alertasTitle.alignment = { vertical: "middle", horizontal: "left" };

  for (let col = 1; col <= 2; col++) {
    summarySheet.getCell(alertasTitle.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FF0000" },
    };
  }

  summarySheet.addRow(["Compromiso hoy SIN RUTA:", paquetesConCommitHoySinRuta]);
  summarySheet.addRow(["Cr칤ticos (>3 d칤as sin ruta):", paquetesCriticos]);
  summarySheet.addRow([]);

  // SECCI칍N: Estad칤sticas de tiempo en bodega
  const tiempoTitle = summarySheet.addRow(["TIEMPO EN BODEGA"]);
  summarySheet.mergeCells(`A${tiempoTitle.number}:B${tiempoTitle.number}`);
  tiempoTitle.font = { bold: true, color: { argb: "FFFFFF" } };
  tiempoTitle.alignment = { vertical: "middle", horizontal: "left" };

  for (let col = 1; col <= 2; col++) {
    summarySheet.getCell(tiempoTitle.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "8C5E4E" },
    };
  }

  summarySheet.addRow(["Paquetes en bodega/ruta:", paquetesEnBodega.length]);
  summarySheet.addRow(["Paquetes > 3 d칤as en bodega:", paquetesConMasDe3Dias]);
  summarySheet.addRow(["Paquetes > 7 d칤as en bodega:", paquetesConMasDe7Dias]);
  summarySheet.addRow(["Promedio d칤as en bodega:", promedioDiasEnBodega]);
  summarySheet.addRow([]);

  // Distribuci칩n por destino
  const destTitle = summarySheet.addRow(["DISTRIBUCI칍N POR DESTINO"]);
  summarySheet.mergeCells(`A${destTitle.number}:B${destTitle.number}`);
  destTitle.font = { bold: true, color: { argb: "FFFFFF" } };
  destTitle.alignment = { vertical: "middle", horizontal: "left" };

  for (let col = 1; col <= 2; col++) {
    summarySheet.getCell(destTitle.number, col).fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "8C5E4E" },
    };
  }

  const destinos = packages.reduce((acc, pkg) => {
    const dest = pkg.shipmentData.destination || "Sin destino";
    acc.set(dest, (acc.get(dest) || 0) + 1);
    return acc;
  }, new Map<string, number>());

  Array.from(destinos).forEach(([destino, count]) => {
    summarySheet.addRow([destino, count]);
  });

  // === AJUSTE DE COLUMNAS ===
  // Hoja principal
  sheet.getColumn(1).width = 5;   // No.
  sheet.getColumn(2).width = 20;  // N칰mero de Tracking
  sheet.getColumn(3).width = 25;  // Destino
  sheet.getColumn(4).width = 20;  // Ubicaci칩n Actual
  sheet.getColumn(5).width = 18;  // Fecha Compromiso
  sheet.getColumn(6).width = 15;  // Estado del Env칤o
  sheet.getColumn(7).width = 12;  // Tipo de Env칤o
  sheet.getColumn(8).width = 15;  // Consolidado
  sheet.getColumn(9).width = 18;  // Fecha de Consolidado
  sheet.getColumn(10).width = 15; // Desembarque
  sheet.getColumn(11).width = 18; // Fecha de Desembarque
  sheet.getColumn(12).width = 20; // Chofer Asignado
  sheet.getColumn(13).width = 15; // Veh칤culo
  sheet.getColumn(14).width = 15; // Placa del Veh칤culo
  sheet.getColumn(15).width = 18; // Estado de la Ruta
  sheet.getColumn(16).width = 20; // Fecha de Creaci칩n de Ruta
  sheet.getColumn(17).width = 20; // Sucursal
  sheet.getColumn(18).width = 15; // D칤as en Bodega

  // Hoja de resumen
  summarySheet.getColumn(1).width = 30;
  summarySheet.getColumn(2).width = 15;

  // Aplicar bordes a la hoja de resumen
  for (let i = 1; i <= summarySheet.rowCount; i++) {
    for (let j = 1; j <= 2; j++) {
      const cell = summarySheet.getCell(i, j);
      if (cell.value) {
        cell.border = {
          top: { style: "thin" },
          left: { style: "thin" },
          bottom: { style: "thin" },
          right: { style: "thin" },
        };
      }
    }
  }

  // Centrar valores en la hoja de resumen
  for (let i = 5; i <= summarySheet.rowCount; i++) {
    const cell = summarySheet.getCell(i, 2);
    if (cell.value) {
      cell.alignment = { vertical: "middle", horizontal: "center" };
    }
  }

  // === EXPORTACI칍N ===
  const buffer = await workbook.xlsx.writeBuffer();
  const fileName = `Seguimiento_Paquetes_${formatDateForFilename(currentDate)}.xlsx`;

  saveAs(
    new Blob([buffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    }),
    fileName
  );

  return buffer;
}

// NUEVA FUNCI칍N: Obtener ubicaci칩n actual con l칩gica especial
const getUbicacionActual = (pkg: MonitoringInfo): string => {
  const status = pkg.shipmentData.shipmentStatus?.toLowerCase();
  
  // Si est치 entregado, mostrar "Entregado"
  if (status === "entregado" || status === "delivered") {
    return "Entregado";
  }
  
  // Para otros casos, usar la ubicaci칩n original
  return pkg.shipmentData.ubication || "N/A";
}

// NUEVA FUNCI칍N: Obtener estado del env칤o con l칩gica especial
const getEstadoDelEnvio = (pkg: MonitoringInfo): string => {
  const status = pkg.shipmentData.shipmentStatus?.toLowerCase();
  
  // Si est치 en bodega y no tiene ruta asignada, mostrar "En Bodega"
  if ((status === "en_bodega" || status === "pending") && !pkg.packageDispatch) {
    return "En Bodega";
  }
  
  // Para otros casos, usar el formateador normal
  return formatShipmentStatus(pkg.shipmentData.shipmentStatus);
}

// FUNCI칍N: Calcular d칤as en bodega usando createdDate
const calculateDaysInWarehouse = (pkg: MonitoringInfo): number => {
  // Solo calcular para paquetes que est치n en bodega o en ruta (no entregados ni devueltos)
  const status = pkg.shipmentData.shipmentStatus?.toLowerCase();
  const excludedStatuses = ["entregado", "delivered", "devuelto_a_fedex", "devuelto"];
  
  if (excludedStatuses.includes(status)) {
    return 0;
  }

  // Usar la nueva propiedad createdDate para el c치lculo exacto
  if (!pkg.shipmentData.createdDate) {
    return 0;
  }

  try {
    const createdDate = new Date(pkg.shipmentData.createdDate);
    const today = new Date();
    
    // Calcular diferencia en d칤as
    const diffTime = today.getTime() - createdDate.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    return Math.max(0, diffDays);
  } catch (error) {
    console.error('Error calculando d칤as en bodega:', error);
    return 0;
  }
}

// FUNCI칍N: Verificar si el commitDateTime es hoy
const hasCommitDateToday = (pkg: MonitoringInfo): boolean => {
  if (!pkg.shipmentData.commitDateTime) {
    return false;
  }

  try {
    const commitDate = new Date(pkg.shipmentData.commitDateTime);
    const today = new Date();
    
    // Comparar solo a침o, mes y d칤a
    return commitDate.getFullYear() === today.getFullYear() &&
           commitDate.getMonth() === today.getMonth() &&
           commitDate.getDate() === today.getDate();
  } catch (error) {
    console.error('Error verificando commit date:', error);
    return false;
  }
}

// StatusMap con _ 
const formatShipmentStatus = (status: string): string => {
  const statusMap: { [key: string]: string } = {
    'en_bodega': 'En Bodega',
    'en_ruta': 'En Ruta',
    'entregado': 'Entregado',
    'devuelto_a_fedex': 'Devuelto a FedEx',
    'devuelto': 'Devuelto',
    'pending': 'Pendiente',
    'in_transit': 'En Tr치nsito',
    'delivered': 'Entregado'
  }
  return statusMap[status?.toLowerCase()] || status || 'Desconocido'
}

const formatRouteStatus = (status: string): string => {
  const statusMap: { [key: string]: string } = {
    'active': 'Activa',
    'completed': 'Completada',
    'pending': 'Pendiente',
    'cancelled': 'Cancelada',
    'in_progress': 'En Progreso'
  }
  return statusMap[status?.toLowerCase()] || status || 'Desconocido'
}

const formatExcelDate = (dateString: string): string => {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return 'Fecha inv치lida';
  }
}

const formatDateForFilename = (date: Date): string => {
  return date.toISOString()
    .replace(/[:.]/g, '-')
    .split('T')[0]
}